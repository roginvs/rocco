// translationunit
// for (;;) {}; for(2+3;4;){}
//
//    at Object.testSnapshot (/Users/vasilii/demo_compiler/testsnapshot.ts:34:10)
//    at Object.<anonymous> (/Users/vasilii/demo_compiler/parser.translationunit.test.ts:33:5)
//    at Object.asyncJestTest (/Users/vasilii/demo_compiler/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)
//    at resolve (/Users/vasilii/demo_compiler/node_modules/jest-jasmine2/build/queueRunner.js:47:12)
//    at new Promise (<anonymous>)
//    at mapper (/Users/vasilii/demo_compiler/node_modules/jest-jasmine2/build/queueRunner.js:30:19)
//    at promise.then (/Users/vasilii/demo_compiler/node_modules/jest-jasmine2/build/queueRunner.js:77:41)
//    at process._tickCallback (internal/process/next_tick.js:68:7)

[
  {
    "type": "while",
    "condition": {
      "type": "const",
      "subtype": "char",
      "value": 1
    },
    "body": {
      "type": "compound-statement",
      "body": []
    }
  },
  {
    "type": "compound-statement",
    "body": [
      {
        "type": "expression",
        "expression": {
          "type": "binary operator",
          "operator": "+",
          "left": {
            "type": "const",
            "subtype": "int",
            "value": 2
          },
          "right": {
            "type": "const",
            "subtype": "int",
            "value": 3
          }
        }
      },
      {
        "type": "while",
        "condition": {
          "type": "const",
          "subtype": "int",
          "value": 4
        },
        "body": {
          "type": "compound-statement",
          "body": []
        }
      }
    ]
  }
]
