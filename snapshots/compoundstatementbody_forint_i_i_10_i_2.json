// compoundstatementbody
// for(int i; i < 10; i++) 2;
//
// 
//
//    at Object.testSnapshot (/Users/vasilii/demo_compiler/core/testsnapshot.ts:44:10)
//    at Object.<anonymous> (/Users/vasilii/demo_compiler/core/parser.funcs.test.ts:31:5)
//    at Object.asyncJestTest (/Users/vasilii/demo_compiler/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)
//    at /Users/vasilii/demo_compiler/node_modules/jest-jasmine2/build/queueRunner.js:47:12
//    at new Promise (<anonymous>)
//    at mapper (/Users/vasilii/demo_compiler/node_modules/jest-jasmine2/build/queueRunner.js:30:19)
//    at /Users/vasilii/demo_compiler/node_modules/jest-jasmine2/build/queueRunner.js:77:41
//    at processTicksAndRejections (internal/process/task_queues.js:97:5)

[
  {
    "type": "compound-statement",
    "body": [
      {
        "type": "declarator",
        "functionSpecifier": null,
        "storageSpecifier": null,
        "identifier": "i",
        "typename": {
          "type": "arithmetic",
          "arithmeticType": "int",
          "const": false,
          "signedUnsigned": null
        },
        "declaratorId": "0001"
      },
      {
        "type": "while",
        "condition": {
          "type": "binary operator",
          "operator": "<",
          "left": {
            "type": "identifier",
            "value": "i",
            "declaratorNodeId": "0001"
          },
          "right": {
            "type": "const",
            "subtype": "int",
            "value": 10
          }
        },
        "body": {
          "type": "compound-statement",
          "body": [
            {
              "type": "expression",
              "expression": {
                "type": "const",
                "subtype": "int",
                "value": 2
              }
            },
            {
              "type": "expression",
              "expression": {
                "type": "postfix ++",
                "target": {
                  "type": "identifier",
                  "value": "i",
                  "declaratorNodeId": "0001"
                }
              }
            }
          ]
        }
      }
    ]
  }
]